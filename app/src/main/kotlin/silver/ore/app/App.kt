/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package silver.ore.app

import org.jline.terminal.Attributes
import org.jline.terminal.Terminal
import org.jline.terminal.TerminalBuilder
import org.jline.utils.InfoCmp

fun main() {
//    val worlds = Array(1) { i -> World() }
//    println(worlds[0].getCube(Random.nextInt(0,255), Random.nextInt(0,255), 128).display())
    val builder: TerminalBuilder = TerminalBuilder.builder()
    builder.system(true)
    val terminal: Terminal = builder.build()
    println(terminal.name + ": " + terminal.type)
    terminal.echo(false)
    val attributes = terminal.attributes
    attributes.setLocalFlag(Attributes.LocalFlag.ICANON, false)
    terminal.attributes = attributes;
    val reader = terminal.reader()

    val world = World(WorldConfig(generatorName = "i1"))
    var x = 128
    var y = 128
    var z = 128
    do {
        println("X: $x, Y: $y, Z: $z")
        println("Chunk: ${world.getChunkByCoordinates(x, y, z)}")
        println(world.getCube(x, y, z).fullDisplay())
        for (i in -16..16) {
            var row: String = ""
            for (j in -24..24) {
                if (i != 0 || j != 0) {
                    row += world.getCube(x + j, y + i, z).display()
                } else {
                    row += "x"
                }
            }
            println(row)
        }
        val integer = reader.read()
        val char = integer.toChar()
        when (char) {
            'w' -> {
                y--
            }
            's' -> {
                y++
            }
            'a' -> {
                x--
            }
            'd' -> {
                x++
            }
            'e' -> {
                z--
            }
            'r' -> {
                z++
            }
        }
        terminal.puts(InfoCmp.Capability.clear_screen);
        terminal.flush();
    } while (char != 'q' && integer != -1)
}
